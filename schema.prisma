// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Task {
  id              String   @id @default(cuid())
  title           String
  description     String?
  priority        String   @default("medium") // low, medium, high
  status          String   @default("todo") // todo, in-progress, completed
  dueDate         DateTime?
  estimatedEffort Int?     // Estimated hours to complete
  subtasks        String?  // JSON array of subtasks
  optimalTime     String?  // Morning, Afternoon, Evening
  blockers        String?  // JSON array of blockers
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  name             String?
  image            String?
  emailVerified    DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  accounts         Account[]
  sessions         Session[]
  profile          UserProfile?
  integrationTokens IntegrationToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  displayName String?
  timezone    String?  @default("UTC")
  workHours   String?  @default("{}")
  preferences String?  @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model IntegrationToken {
  id            String   @id @default(uuid())
  userId        String
  provider      String   // 'google', 'microsoft', etc.
  accessToken   String
  refreshToken  String?
  expiry        DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, provider])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}